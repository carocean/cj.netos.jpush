server:
  #服务地址。目前支持的协议有：tcp,ws,wss,http,https
  host: ws://localhost:6600
  #开放口地址，供客户端访问此networkNode节点。注意：开放口并不一定是当前所在主机的ip和端口号，比如常要用架构是前台一般用ngnix来导转到公网生产环境的内网服务器，如果想让客户端连上只能通过nginx与它相连，那这个开放口就是ngnix的代理地址。
  #简言之这个口就是手机能连的
  openports: ws://47.105.165.186:6600/ws1
  props:
    #如果是ws|wss协议
    wspath:
    workThreadCount: 4
    bossThreadCount: 1
    #单位为秒，如果大于0为开启心跳，而客户端未开启心跳的话，服务器将在重启overtimes次后自动关闭客户端。一般服务器开10秒，客户端开5秒，如果服务端开客户端不开则客户端在被闲置时很快掉线
    heartbeat: 10
    #检测到心跳包最大掉包次数，超过此数则主动关闭远程客户端，如果为0表示不会主动关闭
    overtimes: 10
#注册中心，为app提供发现可用终结点列表的能力，依赖于zookeeper,curator
asc:
  namespace: jpush
  #本终端挂载的节点，不能重复
  mountPath: /terminal-1
  # 生产：172.31.210.92:2181,172.31.210.92:2182,172.31.210.92:2183  开发环境：47.104.128.137:2181,47.104.128.137:2182,47.104.128.137:2183
  connectString: 172.31.210.92:2181,172.31.210.92:2182,172.31.210.92:2183
  sessionTimeoutMs: 500000
  connectionTimeoutMs: 500000
  retryIntervalMs: 5000
restFull:
  appid: system.netos
  appKey: 995C2A861BE8064A1F8A022B5C0D2E36
  appSecret: 6EA4774EE78DCDF0768CA18ECF3AD1DB
  ports:
    uc.auth: http://172.31.210.93/uc/auth.service
    #uc.auth: http://47.105.165.186/uc/auth.service
  okhttp:
    readTimeout: 5000
    writeTimeout: 5000
    connectTimeout: 15000
rabbitmq:
  #用于交易结果提交给网关确认
  host: 47.104.128.137
#  host: 172.31.210.92
  port: 5675
  virtualHost: /jpush
  user: superadmin
  pwd: 123456
  #abbitmq 自带恢复连接机制，只要为true
  automaticRecoveryEnabled: true
  #心跳时间，单位为秒，0表示不用
  requestedHeartbeat: 0
  # 连接超时时间，单位毫秒，0表示不限定
  connectionTimeout: 0
  # 连接池超时时间，单位毫秒，0表示不限定
  workPoolTimeout: 0
  #当自动应答等于true的时候，表示当消费者一收到消息就表示消费者收到了消息，消费者收到了消息就会立即从队列中删除。
  #消息的自动ACK确认机制默认是true
  #在非自动确认模式下如果忘记了ACK，那么后果很严重。当Consumer退出时候，Message会一直重新分发
  #可以修改rabbitmq的配置以设定重试次数
  autoAck: false
  #RabbitMQ提供了一种qos（服务质量保证，即流量控制）功能，即在非自动确认消息的前提下，如果一定数目的消息（通过基于consume或者channel设置Qos的值）未被确认前，不进行消费新的消息。
  basicQos:
    #限制消息本身的大小
    #0为无限制
    prefetchSize: 0
    #会告诉RabbitMQ不要同时给一个消费者推送多于N个消息，即一旦有N个消息还没有ack，则该consumer将等待，直到有消息ack
    #0为无限制
    prefetchCount: 100
    #true是将上面设置应用于channel，简单点说，就是上面限制是channel级别的还是consumer级别
    #默认为false
    global: false
  #用户队列模板，在创建用户队列时使用此模板
  personQueue:
    #队列名的前缀，用来在rabbitmq控制台上辩别用户是从哪个终端上登录录，因此前缀一般指定为终端名,可以为空。如果为空时则以person值作为队列名
    prefixName:  terminal1>
    #设置是否持久化。为 true 则设置队列为持久化。持久化的队列会存盘，在 服务器重启的时候可以保证不丢失相关信息。
    #默认为false
    durable: true
    #设置是否自动删除。为 true 则设置队列为自动删除。自动删除的前提是: 至少有一个消费者连接到这个队列，之后所有与这个队列连接的消费者都断开时，才会 自动删除。不能把这个参数错误地理解为: "当连接到此队列的所有客户端断开时，这 个队列自动删除"，因为生产者客户端创建这个队列，或者没有消费者客户端与这个队 列连接时，都不会自动删除这个队列。
    #默认为true
    autoDelete: false
    #设置是否排他。为 true 则设置队列为排他的。如果一个队列被声明为排 他队列，该队列仅对首次声明它的连接可见，并在连接断开时自动删除。这里需要注意 三点:排他队列是基于连接( Connection) 可见的，同 个连接的不同信道 (Channel) 是可以同时访问同一连接创建的排他队列; "首次"是指如果 个连接己经声明了 排他队列，其他连接是不允许建立同名的排他队列的，这个与普通队列不同:即使该队 列是持久化的，一旦连接关闭或者客户端退出，该排他队列都会被自动删除，这种队列 适用于一个客户端同时发送和读取消息的应用场景。
    #默认为false
    exclusive: false
    #设置队列的其他一些参数，如 x-rnessage-ttl 、x-expires 、x-rnax-length 、x-rnax-length-bytes、 x-dead-letter-exchange、 x-deadletter-routing-key 、 x-rnax-priority 等。
    arguments:
  # 可以绑定到多个exchange上接收消息
  #使用的交换器必须在rabbitmq上已经创建。注：如果先启动生产者节点会自动创建，也可按生产者节点的交换器配置手动在rabbitmq上配置
  exchanges:
    - jpush.exchange.1.amq.direct
    - jpush.exchange.2.amq.direct
  #如果exchanges列表中的交换机在服务器上不存在，则在此列表中查找并自动创建。
  #由于生产会自动创建交换机，而消费者只是绑定到交换机上使用，这导致总是要先启动生产节点而后再启动消费节点。但如果一个节点即是消费节点又是生产节点，则节点便产生异常，致使必须手动在rabbitmq上创建交换机，因此：
  #autoCreateExchanges配置可以在消费者节点检测到不存在要绑定的交换机时自动创建交换机。但是如果与生产者节点配置的交换机属性不同的话会报出异常，因此：
  #下面的配置信息要照抄生产节点相应的交换机配置且要一模一样
  autoCreateExchanges:
    - # 该交换器名提供给消费者绑定
      name: jpush.exchange.1.amq.direct
      # direct|fanout|topic|header
      type: direct
      #设置是否持久 durable 设置为 true 表示持久化， 反之是非持久,设置为true则将Exchange存盘，即使服务器重启数据也不会丢失。默认为false
      durable: true
      #设置是否自动删除，当最后一个绑定到Exchange上的队列删除后，自动删除该Exchange，简单来说也就是如果该Exchange没有和任何队列Queue绑定则删除，默认为false
      autoDelete: false
      #设置是否是RabbitMQ内部使用，默认false。如果设置为 true ，则表示是内置的交换器，客户端程序无法直接发送消息到这个交换器中，只能通过交换器路由到交换器这种方式。
      internal: false
      #扩展参数，用于扩展AMQP协议自制定化使用
      arguments:
    - # 该交换器名提供给消费者绑定
      name: jpush.exchange.2.amq.direct
      # direct|fanout|topic|header
      type: direct
      #设置是否持久 durable 设置为 true 表示持久化， 反之是非持久,设置为true则将Exchange存盘，即使服务器重启数据也不会丢失。默认为false
      durable: true
      #设置是否自动删除，当最后一个绑定到Exchange上的队列删除后，自动删除该Exchange，简单来说也就是如果该Exchange没有和任何队列Queue绑定则删除，默认为false
      autoDelete: false
      #设置是否是RabbitMQ内部使用，默认false。如果设置为 true ，则表示是内置的交换器，客户端程序无法直接发送消息到这个交换器中，只能通过交换器路由到交换器这种方式。
      internal: false
      #扩展参数，用于扩展AMQP协议自制定化使用
      arguments: